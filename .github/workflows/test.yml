name: test

on:
  push:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'

env:
  BUILD_TAG: test
  BASE_IMAGE: test-alpine-s6
  RUNNING_TIMEOUT: 120

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        target:
          - legacy-pureftpd
          - legacy-rrdtool
        alpine_version:
          - 3.12
          - 3.13
          - 3.14
          - 3.15
          - edge
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Prepare
        run: |
          echo "CONTAINER_NAME=${{ matrix.target }}" >> $GITHUB_ENV
          echo "RUNNIN_LOG_CHECK=$(cat ./test/${{ matrix.target }}/logcheck.txt)" >> $GITHUB_ENV
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker
      -
        name: Build image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          load: true
          pull: true
          tags: ${{ env.BASE_IMAGE }}
          build-args: |
            ALPINE_VERSION=${{ matrix.alpine_version }}
      -
        name: Build ${{ matrix.target }}
        uses: docker/build-push-action@v3
        with:
          context: ./test/${{ matrix.target }}
          build-args: |
            BASE_IMAGE=${{ env.BASE_IMAGE }}
          load: true
          tags: ${{ env.BUILD_TAG }}
      -
        name: Start ${{ matrix.target }}
        run: |
          docker rm -f ${{ env.CONTAINER_NAME }} > /dev/null 2>&1 || true
          docker run -d --name ${{ env.CONTAINER_NAME }} ${{ env.BUILD_TAG }}
      -
        name: Test run
        run: |
          TIMEOUT=$((SECONDS + ${{ env.RUNNING_TIMEOUT }}))
          while read LOGLINE; do
            echo ${LOGLINE}
            if [[ ${LOGLINE} == *"${{ env.RUNNING_LOG_CHECK }}"* ]]; then
              echo "üéâ Container up!"
              break
            fi
            if [[ $SECONDS -gt ${TIMEOUT} ]]; then
              >&2 echo "‚ùå Failed to run ${{ env.CONTAINER_NAME }} container"
              exit 1
            fi
          done < <(docker logs -f ${{ env.CONTAINER_NAME }} 2>&1)

          CONTAINER_STATUS=$(docker container inspect --format "{{.State.Status}}" ${{ env.CONTAINER_NAME }})
          if [[ ${CONTAINER_STATUS} != "running" ]]; then
            >&2 echo "‚ùå Container ${{ env.CONTAINER_NAME }} returned status '$CONTAINER_STATUS'"
            exit 1
          fi

          docker stop ${{ env.CONTAINER_NAME }} > /dev/null 2>&1 || true
      -
        name: Build dist
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          load: true
          pull: true
          tags: ${{ env.BASE_IMAGE }}-dist
          build-args: |
            ALPINE_VERSION=${{ matrix.alpine_version }}
      -
        name: Check dist content
        uses: docker/build-push-action@v3
        with:
          context: ./test
          file: ./test/dist.Dockerfile
          build-args: |
            DIST_IMAGE=${{ env.BASE_IMAGE }}-dist
      -
        name: Container logs
        if: always()
        run: |
          docker logs ${{ env.CONTAINER_NAME }}
          docker rm -f ${{ env.CONTAINER_NAME }} > /dev/null 2>&1 || true
