name: test

on:
  push:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - alpine_version: 3.11
          - alpine_version: 3.12
          - alpine_version: 3.13
          - alpine_version: edge
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.alpine_version }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.alpine_version }}-
      -
        name: Prepare
        id: prep
        run: |
          echo ::set-output name=base_image::test-alpine-s6
          echo ::set-output name=build_tag::test
          echo ::set-output name=container_name::rrdcached
          echo ::set-output name=running_timeout::120
          echo ::set-output name=running_log_check::listening for connections
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker
      -
        name: Build Alpine S6
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: ${{ steps.prep.outputs.base_image }}
          build-args: |
            ALPINE_VERSION=${{ matrix.alpine_version }}
          cache-from: type=local,src=/tmp/.buildx-cache
      -
        name: Build RRDCached
        uses: docker/build-push-action@v2
        with:
          context: ./test
          file: ./test/Dockerfile
          build-args: |
            BASE_IMAGE=${{ steps.prep.outputs.base_image }}
          load: true
          tags: ${{ steps.prep.outputs.build_tag }}
      -
        name: Start RRDCached
        run: |
          docker rm -f ${{ steps.prep.outputs.container_name }} > /dev/null 2>&1 || true
          docker run -d --name ${{ steps.prep.outputs.container_name }} ${{ steps.prep.outputs.build_tag }}
      -
        name: Test run
        run: |
          TIMEOUT=$((SECONDS + ${{ steps.prep.outputs.running_timeout }}))
          while read LOGLINE; do
            echo ${LOGLINE}
            if [[ ${LOGLINE} == *"${{ steps.prep.outputs.running_log_check }}"* ]]; then
              echo "🎉 Container up!"
              break
            fi
            if [[ $SECONDS -gt ${TIMEOUT} ]]; then
              >&2 echo "❌ Failed to run ${{ steps.prep.outputs.container_name }} container"
              exit 1
            fi
          done < <(docker logs -f ${{ steps.prep.outputs.container_name }} 2>&1)

          CONTAINER_STATUS=$(docker container inspect --format "{{.State.Status}}" ${{ steps.prep.outputs.container_name }})
          if [[ ${CONTAINER_STATUS} != "running" ]]; then
            >&2 echo "❌ Container ${{ steps.prep.outputs.container_name }} returned status '$CONTAINER_STATUS'"
            exit 1
          fi

          docker stop ${{ steps.prep.outputs.container_name }} > /dev/null 2>&1 || true
      -
        name: Container logs
        if: always()
        run: |
          docker logs ${{ steps.prep.outputs.container_name }}
          docker rm -f ${{ steps.prep.outputs.container_name }} > /dev/null 2>&1 || true
